{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"wav2json\r\n========\r\n\r\nGenerate waveformjs.org compatible json data out of wav files.\r\n\r\nAuthor: Benjamin Schulz\r\n\r\nemail: beschulz[the a with the circle]betabugs.de  \r\n\r\nLicense: GPL\r\n\r\nNote: the file examples/waveform.js is from http://waveformjs.org/\r\n\r\nThis application is based on [wav2png](https://github.com/beschulz/wav2png/) but does generate json data instead of pngs.\r\n\r\n\r\n#Examples\r\n\r\n\twav2json song.wav --channels left right -o song.json\r\n\r\nmight produce output like\r\n\r\n\t{\r\n\t\t\"left\":[0,0.499969,0.865997,0.999969,0.865997,0.499969,0,0.5,0.866028,0,0.866028,0.5],\r\n\t\t\"right\":[0,0.499969,0.865997,0.999969,0.865997,0.499969,0,0.5,0.866028,0,0.866028,0.5],\r\n\t}\r\n\r\n# Performance\r\nSimilar to wav2png (e.g. very good). But it might be a little slower, when generating output for multiple channels.\r\nSince the input file is opened multiple times, I'd recommend to write it to a temporary file first, so you can take advantage of the operating systems file cache:\r\n\r\n\tsox ../song.mp3 -c 2 -t wav tmp.wav\r\n\twav2json tmp.wav --channels left right mid side min max -o song.json\r\n\trm tmp.wav\r\n\r\n# Installation\r\n\r\n## On Linux (Ubuntu, Debian)\r\n\r\n### install dependencies\r\n    apt-get install make g++ libsndfile1-dev libboost-program-options-dev\r\n\r\n### Build\r\n\tcd build\r\n    make all\r\n\r\n## On Max OS\r\n\r\n### install dependencies\r\n* Get the Xcode command line tools\r\n\t* Starting with Xcode 4.3, Apple does not install command line tools by default anymore, so after Xcode installation, go to Preferences > Downloads > Components > Command Line Tools and click Install. You can also directly [download Command Line Tools](https://developer.apple.com/downloads) for Xcode without getting Xcode.\r\n* [Install homebrew](https://github.com/mxcl/homebrew/wiki/installation)\r\n* install libsndfile: in the shell: brew install libsndfile\r\n\r\n### Build\r\n* in the shell: cd build && make all\r\n\r\n#Usage\r\n\r\n\twav2json version 0.1\r\n\twritten by Benjamin Schulz (beschulz[the a with the circle]betabugs.de)\r\n\r\n\tusage: wav2json [options] input_file_name\r\n\texample: wav2json my_file.wav\r\n\r\n\tAllowed options:\r\n\r\n\tGeneric options:\r\n\t  -v [ --version ]      print version string\r\n\t  --help                produce help message\r\n\r\n\tConfiguration:\r\n\t  -s [ --samples ] arg (=800)           number of samples to generate\r\n\t  --channels arg (=left right )         channels to compute: left, right, mid, \r\n\t                                        side, min, max\r\n\t  -o [ --output ] arg                   name of output file, defaults to <name \r\n\t                                        of inputfile>.json\r\n\t  -c [ --config-file ] arg (=wav2json.cfg)\r\n\t                                        config file to use\r\n\t  -d [ --db-scale ]                     use logarithmic (e.g. decibel) scale \r\n\t                                        instead of linear scale\r\n\t  --db-min arg (=-48)                   minimum value of the signal in dB, that\r\n\t                                        will be visible in the waveform\r\n\t  --db-max arg (=0)                     maximum value of the signal in dB, that\r\n\t                                        will be visible in the waveform. \r\n\t                                        Usefull, if you now, that your signal \r\n\t                                        peaks at a certain level.\r\n\r\nOne thing, thats noteworthy is, that you can generate output for multiple cahannels:\r\n\r\n* left is the left channel of the audio file.\r\n* right is the right channel of the audio file\r\n* mid is the mid channel of the audio file computed per sample as: mid = (left + right) / 2\r\n* side is the side channel of the audio file computed per sample as: side = (left + right) / 2\r\n* max is the maximum of the channels of the audio file computed per sample as: max = max(left, right)\r\n* min is the minimum of the channels of the audio file computed per sample as: min = min(left, right)\r\n\r\nObviously outputting the right, mid, side, min, max channels does only make sense on stereo input. When the input is mono,\r\nthe applications falls back to outputing the left channel and prints a warning to stderr.\r\n\r\nWhen there are more than two channels present, the output might be a little non-sensical, depending on what information is stored in the first and second channel.\r\n\r\n# Donations\r\nIf you find wav2png incredibly usefull nd use it a lot, feel free to make a small [donation via paypal](http://goo.gl/Ey2Bp).\r\nWhile it is highly appreciated, it is absolutely not necessary to us the software.\r\n\r\nIf you find any issues, feel free to contact me.\r\nand most important: enjoy and have fun :D\r\n\r\n","name":"Wav2json","tagline":"Generate waveformjs.org compatible json data out of wav files.","google":"UA-16109569-5"}